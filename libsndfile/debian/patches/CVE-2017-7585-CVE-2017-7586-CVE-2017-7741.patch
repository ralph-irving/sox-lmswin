Description: fixes buffer write overflows
 This patch was backported from Debian sid to wheezy's 1.0.25 release
 and (verifiably) fixes CVE-2017-7741 and (presumably) CVE-2017-7585
 and CVE-2017-7586 (they lack reproducers). 
Author: Erik de Castro Lopo
Origin: upstream
Applied-Upstream: 1.0.28
Reviewed-by: IOhannes m zm√∂lnig
Last-Update: 2017-04-03
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/src/id3.c
+++ b/src/id3.c
@@ -1,5 +1,5 @@
 /*
-** Copyright (C) 2010-2011 Erik de Castro Lopo <erikd@mega-nerd.com>
+** Copyright (C) 2010-2017 Erik de Castro Lopo <erikd@mega-nerd.com>
 **
 ** This program is free software; you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
@@ -40,12 +40,17 @@ id3_skip (SF_PRIVATE * psf)
 		offset = (offset << 7) | (buf [8] & 0x7f) ;
 		offset = (offset << 7) | (buf [9] & 0x7f) ;
 
-		psf_binheader_readf (psf, "j", make_size_t (offset)) ;
-
 		psf_log_printf (psf, "ID3 length : %d\n--------------------\n", offset) ;
 
+		/* Never want to jump backwards in a file. */
+		if (offset < 0)
+			return 0 ;
+
 		psf->fileoffset = 10 + offset ;
-		return 1 ;
+		if (psf->fileoffset < psf->filelength)
+		{	psf_binheader_readf (psf, "p", psf->fileoffset) ;
+			return 1 ;
+			} ;
 		} ;
 
 	return 0 ;
--- a/src/flac.c
+++ b/src/flac.c
@@ -59,10 +59,10 @@ typedef struct
 
 	FLAC__StreamMetadata *metadata ;
 
-	const FLAC__int32 * const * wbuffer ;
-	FLAC__int32 * rbuffer [FLAC__MAX_CHANNELS] ;
+	const int32_t * const * wbuffer ;
+	int32_t * rbuffer [FLAC__MAX_CHANNELS] ;
 
-	FLAC__int32* encbuffer ;
+	int32_t* encbuffer ;
 	unsigned bufferpos ;
 
 	const FLAC__Frame *frame ;
@@ -90,18 +90,18 @@ static sf_count_t	flac_write_i2flac (SF_
 static sf_count_t	flac_write_f2flac (SF_PRIVATE *psf, const float *ptr, sf_count_t len) ;
 static sf_count_t	flac_write_d2flac (SF_PRIVATE *psf, const double *ptr, sf_count_t len) ;
 
-static void		f2flac8_array (const float *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		f2flac16_array (const float *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		f2flac24_array (const float *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		f2flac8_clip_array (const float *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		f2flac16_clip_array (const float *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		f2flac24_clip_array (const float *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		d2flac8_array (const double *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		d2flac16_array (const double *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		d2flac24_array (const double *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		d2flac8_clip_array (const double *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		d2flac16_clip_array (const double *src, FLAC__int32 *dest, int count, int normalize) ;
-static void		d2flac24_clip_array (const double *src, FLAC__int32 *dest, int count, int normalize) ;
+static void		f2flac8_array (const float *src, int32_t *dest, int count, int normalize) ;
+static void		f2flac16_array (const float *src, int32_t *dest, int count, int normalize) ;
+static void		f2flac24_array (const float *src, int32_t *dest, int count, int normalize) ;
+static void		f2flac8_clip_array (const float *src, int32_t *dest, int count, int normalize) ;
+static void		f2flac16_clip_array (const float *src, int32_t *dest, int count, int normalize) ;
+static void		f2flac24_clip_array (const float *src, int32_t *dest, int count, int normalize) ;
+static void		d2flac8_array (const double *src, int32_t *dest, int count, int normalize) ;
+static void		d2flac16_array (const double *src, int32_t *dest, int count, int normalize) ;
+static void		d2flac24_array (const double *src, int32_t *dest, int count, int normalize) ;
+static void		d2flac8_clip_array (const double *src, int32_t *dest, int count, int normalize) ;
+static void		d2flac16_clip_array (const double *src, int32_t *dest, int count, int normalize) ;
+static void		d2flac24_clip_array (const double *src, int32_t *dest, int count, int normalize) ;
 
 static int flac_command (SF_PRIVATE *psf, int command, void *data, int datasize) ;
 
@@ -111,7 +111,7 @@ static FLAC__StreamDecoderSeekStatus sf_
 static FLAC__StreamDecoderTellStatus sf_flac_tell_callback (const FLAC__StreamDecoder *decoder, FLAC__uint64 *absolute_byte_offset, void *client_data) ;
 static FLAC__StreamDecoderLengthStatus sf_flac_length_callback (const FLAC__StreamDecoder *decoder, FLAC__uint64 *stream_length, void *client_data) ;
 static FLAC__bool sf_flac_eof_callback (const FLAC__StreamDecoder *decoder, void *client_data) ;
-static FLAC__StreamDecoderWriteStatus sf_flac_write_callback (const FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const FLAC__int32 * const buffer [], void *client_data) ;
+static FLAC__StreamDecoderWriteStatus sf_flac_write_callback (const FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const int32_t * const buffer [], void *client_data) ;
 static void sf_flac_meta_callback (const FLAC__StreamDecoder *decoder, const FLAC__StreamMetadata *metadata, void *client_data) ;
 static void sf_flac_error_callback (const FLAC__StreamDecoder *decoder, FLAC__StreamDecoderErrorStatus status, void *client_data) ;
 
@@ -121,38 +121,38 @@ static FLAC__StreamEncoderTellStatus sf_
 static FLAC__StreamEncoderWriteStatus sf_flac_enc_write_callback (const FLAC__StreamEncoder *encoder, const FLAC__byte buffer [], size_t bytes, unsigned samples, unsigned current_frame, void *client_data) ;
 
 static void
-s2flac8_array (const short *src, FLAC__int32 *dest, int count)
+s2flac8_array (const short *src, int32_t *dest, int count)
 {	while (--count >= 0)
 		dest [count] = src [count] >> 8 ;
 } /* s2flac8_array */
 
 static void
-s2flac16_array (const short *src, FLAC__int32 *dest, int count)
+s2flac16_array (const short *src, int32_t *dest, int count)
 {	while (--count >= 0)
 		dest [count] = src [count] ;
 } /* s2flac16_array */
 
 static void
-s2flac24_array (const short *src, FLAC__int32 *dest, int count)
+s2flac24_array (const short *src, int32_t *dest, int count)
 {	while (--count >= 0)
 		dest [count] = src [count] << 8 ;
 } /* s2flac24_array */
 
 static void
-i2flac8_array (const int *src, FLAC__int32 *dest, int count)
+i2flac8_array (const int *src, int32_t *dest, int count)
 {	while (--count >= 0)
 		dest [count] = src [count] >> 24 ;
 } /* i2flac8_array */
 
 static void
-i2flac16_array (const int *src, FLAC__int32 *dest, int count)
+i2flac16_array (const int *src, int32_t *dest, int count)
 {
   while (--count >= 0)
     dest [count] = src [count] >> 16 ;
 } /* i2flac16_array */
 
 static void
-i2flac24_array (const int *src, FLAC__int32 *dest, int count)
+i2flac24_array (const int *src, int32_t *dest, int count)
 {	while (--count >= 0)
 		dest [count] = src [count] >> 8 ;
 } /* i2flac24_array */
@@ -161,8 +161,8 @@ static sf_count_t
 flac_buffer_copy (SF_PRIVATE *psf)
 {	FLAC_PRIVATE* pflac = (FLAC_PRIVATE*) psf->codec_data ;
 	const FLAC__Frame *frame = pflac->frame ;
-	const FLAC__int32* const *buffer = pflac->wbuffer ;
-	unsigned i = 0, j, offset ;
+	const int32_t* const *buffer = pflac->wbuffer ;
+	unsigned i = 0, j, offset, channels, len ;
 
 	/*
 	**	frame->header.blocksize is variable and we're using a constant blocksize
@@ -174,6 +174,10 @@ flac_buffer_copy (SF_PRIVATE *psf)
 		psf->error = SFE_INTERNAL ;
 		return 0 ;
 		} ;
+	if (frame->header.channels > FLAC__MAX_CHANNELS)
+		psf_log_printf (psf, "Ooops : frame->header.channels (%d) > FLAC__MAX_BLOCK_SIZE (%d)\n", __func__, __LINE__, frame->header.channels, FLAC__MAX_CHANNELS) ;
+
+	channels = SF_MIN (frame->header.channels, FLAC__MAX_CHANNELS) ;
 
 	if (pflac->ptr == NULL)
 	{	/*
@@ -181,47 +185,55 @@ flac_buffer_copy (SF_PRIVATE *psf)
 		**	Removing it causes valgrind errors.
 		*/
 		pflac->bufferbackup = SF_TRUE ;
-		for (i = 0 ; i < frame->header.channels ; i++)
+		for (i = 0 ; i < channels ; i++)
 		{
 			if (pflac->rbuffer [i] == NULL)
-				pflac->rbuffer [i] = calloc (FLAC__MAX_BLOCK_SIZE, sizeof (FLAC__int32)) ;
+				pflac->rbuffer [i] = calloc (FLAC__MAX_BLOCK_SIZE, sizeof (int32_t)) ;
 
-			memcpy (pflac->rbuffer [i], buffer [i], frame->header.blocksize * sizeof (FLAC__int32)) ;
+			memcpy (pflac->rbuffer [i], buffer [i], frame->header.blocksize * sizeof (int32_t)) ;
 			} ;
-		pflac->wbuffer = (const FLAC__int32* const*) pflac->rbuffer ;
+		pflac->wbuffer = (const int32_t* const*) pflac->rbuffer ;
 
 		return 0 ;
 		} ;
 
+    len = SF_MIN (pflac->len, frame->header.blocksize) ;
+
 	switch (pflac->pcmtype)
 	{	case PFLAC_PCM_SHORT :
 			{	short *retpcm = (short*) pflac->ptr ;
 				int shift = 16 - frame->header.bits_per_sample ;
 				if (shift < 0)
 				{	shift = abs (shift) ;
-					for (i = 0 ; i < frame->header.blocksize && pflac->remain > 0 ; i++)
-					{	offset = pflac->pos + i * frame->header.channels ;
+					for (i = 0 ; i < len && pflac->remain > 0 ; i++)
+					{	offset = pflac->pos + i * channels ;
 
 						if (pflac->bufferpos >= frame->header.blocksize)
 							break ;
 
-						for (j = 0 ; j < frame->header.channels ; j++)
+						if (offset + channels > pflac->len)
+							break ;
+
+						for (j = 0 ; j < channels ; j++)
 							retpcm [offset + j] = buffer [j][pflac->bufferpos] >> shift ;
-						pflac->remain -= frame->header.channels ;
+						pflac->remain -= channels ;
 						pflac->bufferpos++ ;
 						}
 					}
 				else
-				{	for (i = 0 ; i < frame->header.blocksize && pflac->remain > 0 ; i++)
-					{	offset = pflac->pos + i * frame->header.channels ;
+				{	for (i = 0 ; i < len && pflac->remain > 0 ; i++)
+					{	offset = pflac->pos + i * channels ;
 
 						if (pflac->bufferpos >= frame->header.blocksize)
 							break ;
 
-						for (j = 0 ; j < frame->header.channels ; j++)
+						if (offset + channels > pflac->len)
+							break ;
+
+						for (j = 0 ; j < channels ; j++)
 							retpcm [offset + j] = (buffer [j][pflac->bufferpos]) << shift ;
 
-						pflac->remain -= frame->header.channels ;
+						pflac->remain -= channels ;
 						pflac->bufferpos++ ;
 						} ;
 					} ;
@@ -231,15 +243,18 @@ flac_buffer_copy (SF_PRIVATE *psf)
 		case PFLAC_PCM_INT :
 			{	int *retpcm = (int*) pflac->ptr ;
 				int shift = 32 - frame->header.bits_per_sample ;
-				for (i = 0 ; i < frame->header.blocksize && pflac->remain > 0 ; i++)
-				{	offset = pflac->pos + i * frame->header.channels ;
+				for (i = 0 ; i < len && pflac->remain > 0 ; i++)
+				{	offset = pflac->pos + i * channels ;
 
 					if (pflac->bufferpos >= frame->header.blocksize)
 						break ;
 
-					for (j = 0 ; j < frame->header.channels ; j++)
+					if (offset + channels > pflac->len)
+						break ;
+
+					for (j = 0 ; j < channels ; j++)
 						retpcm [offset + j] = buffer [j][pflac->bufferpos] << shift ;
-					pflac->remain -= frame->header.channels ;
+					pflac->remain -= channels ;
 					pflac->bufferpos++ ;
 					} ;
 				} ;
@@ -249,15 +264,18 @@ flac_buffer_copy (SF_PRIVATE *psf)
 			{	float *retpcm = (float*) pflac->ptr ;
 				float norm = (psf->norm_float == SF_TRUE) ? 1.0 / (1 << (frame->header.bits_per_sample - 1)) : 1.0 ;
 
-				for (i = 0 ; i < frame->header.blocksize && pflac->remain > 0 ; i++)
-				{	offset = pflac->pos + i * frame->header.channels ;
+				for (i = 0 ; i < len && pflac->remain > 0 ; i++)
+				{	offset = pflac->pos + i * channels ;
 
 					if (pflac->bufferpos >= frame->header.blocksize)
 						break ;
 
-					for (j = 0 ; j < frame->header.channels ; j++)
+					if (offset + channels > pflac->len)
+						break ;
+
+					for (j = 0 ; j < channels ; j++)
 						retpcm [offset + j] = buffer [j][pflac->bufferpos] * norm ;
-					pflac->remain -= frame->header.channels ;
+					pflac->remain -= channels ;
 					pflac->bufferpos++ ;
 					} ;
 				} ;
@@ -267,15 +285,18 @@ flac_buffer_copy (SF_PRIVATE *psf)
 			{	double *retpcm = (double*) pflac->ptr ;
 				double norm = (psf->norm_double == SF_TRUE) ? 1.0 / (1 << (frame->header.bits_per_sample - 1)) : 1.0 ;
 
-				for (i = 0 ; i < frame->header.blocksize && pflac->remain > 0 ; i++)
-				{	offset = pflac->pos + i * frame->header.channels ;
+				for (i = 0 ; i < len && pflac->remain > 0 ; i++)
+				{	offset = pflac->pos + i * channels ;
 
 					if (pflac->bufferpos >= frame->header.blocksize)
 						break ;
 
-					for (j = 0 ; j < frame->header.channels ; j++)
+					if (offset + channels > pflac->len)
+						break ;
+
+					for (j = 0 ; j < channels ; j++)
 						retpcm [offset + j] = buffer [j][pflac->bufferpos] * norm ;
-					pflac->remain -= frame->header.channels ;
+					pflac->remain -= channels ;
 					pflac->bufferpos++ ;
 					} ;
 				} ;
@@ -285,8 +306,8 @@ flac_buffer_copy (SF_PRIVATE *psf)
 			return 0 ;
 		} ;
 
-	offset = i * frame->header.channels ;
-	pflac->pos += i * frame->header.channels ;
+	offset = i * channels ;
+	pflac->pos += i * channels ;
 
 	return offset ;
 } /* flac_buffer_copy */
@@ -346,7 +367,7 @@ sf_flac_eof_callback (const FLAC__Stream
 } /* sf_flac_eof_callback */
 
 static FLAC__StreamDecoderWriteStatus
-sf_flac_write_callback (const FLAC__StreamDecoder * UNUSED (decoder), const FLAC__Frame *frame, const FLAC__int32 * const buffer [], void *client_data)
+sf_flac_write_callback (const FLAC__StreamDecoder * UNUSED (decoder), const FLAC__Frame *frame, const int32_t * const buffer [], void *client_data)
 {	SF_PRIVATE *psf = (SF_PRIVATE*) client_data ;
 	FLAC_PRIVATE* pflac = (FLAC_PRIVATE*) psf->codec_data ;
 
@@ -363,7 +384,7 @@ sf_flac_write_callback (const FLAC__Stre
 
 static void
 sf_flac_meta_get_vorbiscomments (SF_PRIVATE *psf, const FLAC__StreamMetadata *metadata)
-{	FLAC_TAG tags [] =
+{	static FLAC_TAG tags [] =
 	{ 	{ "title", SF_STR_TITLE },
 		{ "copyright", SF_STR_COPYRIGHT },
 		{ "software", SF_STR_SOFTWARE },
@@ -399,7 +420,8 @@ sf_flac_meta_get_vorbiscomments (SF_PRIV
 static void
 sf_flac_meta_callback (const FLAC__StreamDecoder * UNUSED (decoder), const FLAC__StreamMetadata *metadata, void *client_data)
 {	SF_PRIVATE *psf = (SF_PRIVATE*) client_data ;
-	int bitwidth = 0 ;
+	FLAC_PRIVATE* pflac = (FLAC_PRIVATE*) psf->codec_data ;
+	int bitwidth = 0, i ;
 
 	switch (metadata->type)
 	{	case FLAC__METADATA_TYPE_STREAMINFO :
@@ -436,6 +458,12 @@ sf_flac_meta_callback (const FLAC__Strea
 
 			if (bitwidth > 0)
 				psf_log_printf (psf, "  Bit width   : %d\n", bitwidth) ;
+
+
+			for (i = 0 ; i < psf->sf.channels ; i++)
+				pflac->rbuffer [i] = calloc (FLAC__MAX_BLOCK_SIZE, sizeof (int32_t)) ;
+
+			pflac->wbuffer = (const int32_t* const*) pflac->rbuffer ;
 			break ;
 
 		case FLAC__METADATA_TYPE_VORBIS_COMMENT :
@@ -612,7 +640,7 @@ flac_write_header (SF_PRIVATE *psf, int
 
 	if (psf->error == 0)
 		psf->dataoffset = psf_ftell (psf) ;
-	pflac->encbuffer = calloc (ENC_BUFFER_SIZE, sizeof (FLAC__int32)) ;
+	pflac->encbuffer = calloc (ENC_BUFFER_SIZE, sizeof (int32_t)) ;
 
 	return psf->error ;
 } /* flac_write_header */
@@ -839,9 +867,12 @@ flac_read_loop (SF_PRIVATE *psf, unsigne
 	pflac->pos = 0 ;
 	pflac->len = len ;
 	pflac->remain = len ;
+
+	/* First copy data that has already been decoded and buffered. */
 	if (pflac->frame != NULL && pflac->bufferpos < pflac->frame->header.blocksize)
 		flac_buffer_copy (psf) ;
 
+	/* Decode some more. */
 	while (pflac->pos < pflac->len)
 	{	if (FLAC__stream_decoder_process_single (pflac->fsd) == 0)
 			break ;
@@ -925,6 +956,7 @@ flac_read_flac2d (SF_PRIVATE *psf, doubl
 	while (total < len)
 	{	pflac->ptr = ptr + total ;
 		readlen = (len - total > 0x1000000) ? 0x1000000 : (unsigned) (len - total) ;
+
 		current = flac_read_loop (psf, readlen) ;
 		if (current == 0)
 			break ;
@@ -937,10 +969,10 @@ flac_read_flac2d (SF_PRIVATE *psf, doubl
 static sf_count_t
 flac_write_s2flac (SF_PRIVATE *psf, const short *ptr, sf_count_t len)
 {	FLAC_PRIVATE* pflac = (FLAC_PRIVATE*) psf->codec_data ;
-	void (*convert) (const short *, FLAC__int32 *, int) ;
+	void (*convert) (const short *, int32_t *, int) ;
 	int bufferlen, writecount, thiswrite ;
 	sf_count_t	total = 0 ;
-	FLAC__int32* buffer = pflac->encbuffer ;
+	int32_t* buffer = pflac->encbuffer ;
 
 	switch (SF_CODEC (psf->sf.format))
 	{	case SF_FORMAT_PCM_S8 :
@@ -956,7 +988,7 @@ flac_write_s2flac (SF_PRIVATE *psf, cons
 			return -1 ;
 		} ;
 
-	bufferlen = ENC_BUFFER_SIZE / (sizeof (FLAC__int32) * psf->sf.channels) ;
+	bufferlen = ENC_BUFFER_SIZE / (sizeof (int32_t) * psf->sf.channels) ;
 	bufferlen *= psf->sf.channels ;
 
 	while (len > 0)
@@ -979,10 +1011,10 @@ flac_write_s2flac (SF_PRIVATE *psf, cons
 static sf_count_t
 flac_write_i2flac (SF_PRIVATE *psf, const int *ptr, sf_count_t len)
 {	FLAC_PRIVATE* pflac = (FLAC_PRIVATE*) psf->codec_data ;
-	void (*convert) (const int *, FLAC__int32 *, int) ;
+	void (*convert) (const int *, int32_t *, int) ;
 	int bufferlen, writecount, thiswrite ;
 	sf_count_t	total = 0 ;
-	FLAC__int32* buffer = pflac->encbuffer ;
+	int32_t* buffer = pflac->encbuffer ;
 
 	switch (SF_CODEC (psf->sf.format))
 	{	case SF_FORMAT_PCM_S8 :
@@ -998,7 +1030,7 @@ flac_write_i2flac (SF_PRIVATE *psf, cons
 			return -1 ;
 		} ;
 
-	bufferlen = ENC_BUFFER_SIZE / (sizeof (FLAC__int32) * psf->sf.channels) ;
+	bufferlen = ENC_BUFFER_SIZE / (sizeof (int32_t) * psf->sf.channels) ;
 	bufferlen *= psf->sf.channels ;
 
 	while (len > 0)
@@ -1021,10 +1053,10 @@ flac_write_i2flac (SF_PRIVATE *psf, cons
 static sf_count_t
 flac_write_f2flac (SF_PRIVATE *psf, const float *ptr, sf_count_t len)
 {	FLAC_PRIVATE* pflac = (FLAC_PRIVATE*) psf->codec_data ;
-	void (*convert) (const float *, FLAC__int32 *, int, int) ;
+	void (*convert) (const float *, int32_t *, int, int) ;
 	int bufferlen, writecount, thiswrite ;
 	sf_count_t	total = 0 ;
-	FLAC__int32* buffer = pflac->encbuffer ;
+	int32_t* buffer = pflac->encbuffer ;
 
 	switch (SF_CODEC (psf->sf.format))
 	{	case SF_FORMAT_PCM_S8 :
@@ -1040,7 +1072,7 @@ flac_write_f2flac (SF_PRIVATE *psf, cons
 			return -1 ;
 		} ;
 
-	bufferlen = ENC_BUFFER_SIZE / (sizeof (FLAC__int32) * psf->sf.channels) ;
+	bufferlen = ENC_BUFFER_SIZE / (sizeof (int32_t) * psf->sf.channels) ;
 	bufferlen *= psf->sf.channels ;
 
 	while (len > 0)
@@ -1061,7 +1093,7 @@ flac_write_f2flac (SF_PRIVATE *psf, cons
 } /* flac_write_f2flac */
 
 static void
-f2flac8_clip_array (const float *src, FLAC__int32 *dest, int count, int normalize)
+f2flac8_clip_array (const float *src, int32_t *dest, int count, int normalize)
 {	float normfact, scaled_value ;
 
 	normfact = normalize ? (8.0 * 0x10) : 1.0 ;
@@ -1083,7 +1115,7 @@ f2flac8_clip_array (const float *src, FL
 } /* f2flac8_clip_array */
 
 static void
-f2flac16_clip_array (const float *src, FLAC__int32 *dest, int count, int normalize)
+f2flac16_clip_array (const float *src, int32_t *dest, int count, int normalize)
 {
   float normfact, scaled_value ;
 
@@ -1104,7 +1136,7 @@ f2flac16_clip_array (const float *src, F
 } /* f2flac16_clip_array */
 
 static void
-f2flac24_clip_array (const float *src, FLAC__int32 *dest, int count, int normalize)
+f2flac24_clip_array (const float *src, int32_t *dest, int count, int normalize)
 {	float normfact, scaled_value ;
 
 	normfact = normalize ? (8.0 * 0x100000) : 1.0 ;
@@ -1127,7 +1159,7 @@ f2flac24_clip_array (const float *src, F
 } /* f2flac24_clip_array */
 
 static void
-f2flac8_array (const float *src, FLAC__int32 *dest, int count, int normalize)
+f2flac8_array (const float *src, int32_t *dest, int count, int normalize)
 {	float normfact = normalize ? (1.0 * 0x7F) : 1.0 ;
 
 	while (--count >= 0)
@@ -1135,7 +1167,7 @@ f2flac8_array (const float *src, FLAC__i
 } /* f2flac8_array */
 
 static void
-f2flac16_array (const float *src, FLAC__int32 *dest, int count, int normalize)
+f2flac16_array (const float *src, int32_t *dest, int count, int normalize)
 {	float normfact = normalize ? (1.0 * 0x7FFF) : 1.0 ;
 
 	while (--count >= 0)
@@ -1143,7 +1175,7 @@ f2flac16_array (const float *src, FLAC__
 } /* f2flac16_array */
 
 static void
-f2flac24_array (const float *src, FLAC__int32 *dest, int count, int normalize)
+f2flac24_array (const float *src, int32_t *dest, int count, int normalize)
 {	float normfact = normalize ? (1.0 * 0x7FFFFF) : 1.0 ;
 
 	while (--count >= 0)
@@ -1153,10 +1185,10 @@ f2flac24_array (const float *src, FLAC__
 static sf_count_t
 flac_write_d2flac (SF_PRIVATE *psf, const double *ptr, sf_count_t len)
 {	FLAC_PRIVATE* pflac = (FLAC_PRIVATE*) psf->codec_data ;
-	void (*convert) (const double *, FLAC__int32 *, int, int) ;
+	void (*convert) (const double *, int32_t *, int, int) ;
 	int bufferlen, writecount, thiswrite ;
 	sf_count_t	total = 0 ;
-	FLAC__int32* buffer = pflac->encbuffer ;
+	int32_t* buffer = pflac->encbuffer ;
 
 	switch (SF_CODEC (psf->sf.format))
 	{	case SF_FORMAT_PCM_S8 :
@@ -1172,7 +1204,7 @@ flac_write_d2flac (SF_PRIVATE *psf, cons
 			return -1 ;
 		} ;
 
-	bufferlen = ENC_BUFFER_SIZE / (sizeof (FLAC__int32) * psf->sf.channels) ;
+	bufferlen = ENC_BUFFER_SIZE / (sizeof (int32_t) * psf->sf.channels) ;
 	bufferlen *= psf->sf.channels ;
 
 	while (len > 0)
@@ -1193,7 +1225,7 @@ flac_write_d2flac (SF_PRIVATE *psf, cons
 } /* flac_write_d2flac */
 
 static void
-d2flac8_clip_array (const double *src, FLAC__int32 *dest, int count, int normalize)
+d2flac8_clip_array (const double *src, int32_t *dest, int count, int normalize)
 {	double normfact, scaled_value ;
 
 	normfact = normalize ? (8.0 * 0x10) : 1.0 ;
@@ -1215,7 +1247,7 @@ d2flac8_clip_array (const double *src, F
 } /* d2flac8_clip_array */
 
 static void
-d2flac16_clip_array (const double *src, FLAC__int32 *dest, int count, int normalize)
+d2flac16_clip_array (const double *src, int32_t *dest, int count, int normalize)
 {	double normfact, scaled_value ;
 
 	normfact = normalize ? (8.0 * 0x1000) : 1.0 ;
@@ -1237,7 +1269,7 @@ d2flac16_clip_array (const double *src,
 } /* d2flac16_clip_array */
 
 static void
-d2flac24_clip_array (const double *src, FLAC__int32 *dest, int count, int normalize)
+d2flac24_clip_array (const double *src, int32_t *dest, int count, int normalize)
 {	double normfact, scaled_value ;
 
 	normfact = normalize ? (8.0 * 0x100000) : 1.0 ;
@@ -1259,7 +1291,7 @@ d2flac24_clip_array (const double *src,
 } /* d2flac24_clip_array */
 
 static void
-d2flac8_array (const double *src, FLAC__int32 *dest, int count, int normalize)
+d2flac8_array (const double *src, int32_t *dest, int count, int normalize)
 {	double normfact = normalize ? (1.0 * 0x7F) : 1.0 ;
 
 	while (--count >= 0)
@@ -1267,7 +1299,7 @@ d2flac8_array (const double *src, FLAC__
 } /* d2flac8_array */
 
 static void
-d2flac16_array (const double *src, FLAC__int32 *dest, int count, int normalize)
+d2flac16_array (const double *src, int32_t *dest, int count, int normalize)
 {	double normfact = normalize ? (1.0 * 0x7FFF) : 1.0 ;
 
 	while (--count >= 0)
@@ -1275,7 +1307,7 @@ d2flac16_array (const double *src, FLAC_
 } /* d2flac16_array */
 
 static void
-d2flac24_array (const double *src, FLAC__int32 *dest, int count, int normalize)
+d2flac24_array (const double *src, int32_t *dest, int count, int normalize)
 {	double normfact = normalize ? (1.0 * 0x7FFFFF) : 1.0 ;
 
 	while (--count >= 0)
